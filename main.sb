' **********PROGRAM PROPERTIES**************
' *************************************************
' GAME PROPERTIES
FPS = 60

' BALLOON PROPERTIES
BALLOON_DIAMETER = 30
BALLOON_OUTLINE_THICKNESS = 2
BALLOON_SPEED = 3 'Pixels Per Frame
SECS_TILL_BALL_CHANGES_DIR = 1 'Seconds until the balloon changes direction
FRAMES_TILL_BALL_CHANGES_DIR = SECS_TILL_BALL_CHANGES_DIR * FPS

' PLAYER PROPERTIES
PLAYER_WIDTH = 60
PLAYER_HEIGHT = 40
PLAYER_BARREL_WIDTH = 20
PLAYER_BARREL_HEIGHT = 15
PLAYER_SPEED = 2 'Pixels Per Frame

' BULLET PROPERTIES
BULLET_HEIGHT = 10
BULLET_WIDTH = 10
BULLET_SPEED = BALLOON_SPEED * 1.5

' WINDOW PROPERTIES
WNDOW_PADDING = 10
WINDOW_WIDTH = 640
WINDOW_HEIGHT = 480
SCORE_PANEL_HEIGHT = 45

'**********MAIN GAME LOGIC*************
'*******************************************
' Initialise Variables
currStep = FRAMES_TILL_BALL_CHANGES_DIR
gameWon = "False"
playerMoving = "False"
bulletExists = "False"
missedShots = 0

' Intialise Game Graphics Window
CreateGameWindow()
CreateScorePanel()

' Create Game Objects
CreateBalloon()
CreatePlayer()

' Subscribe to events
GraphicsWindow.KeyDown = OnKeyDown
GraphicsWindow.KeyUp = OnKeyUp

' Main game loop
While gameWon = "False"
  SetFrameRate()
  AnimateBalloon()
  If playerMoving = "True" Then
    MovePlayer()
  EndIf
  If bulletExists = "True" Then
    MoveBullet()
    CheckBulletBalloonCollision()
  EndIf
EndWhile

' End game
GraphicsWindow.ShowMessage("You have shot the balloon down, with " + missedShots + " missed shots!", "Game Over!")
Program.End()

' **********SUBROUTINES***********
'*************************************
'  Game Window Subroutines******************************

' Create the game window with a border.
Sub CreateGameWindow
  ' Set the game window height and width
  GraphicsWindow.Height = WINDOW_HEIGHT
  GraphicsWindow.Width = WINDOW_WIDTH
  gw = GraphicsWindow.Width
  gh = GraphicsWindow.Height
  
  GraphicsWindow.Title = "Balloon Shooting Challenge"
  
  ' Draw the border within which the game will take place, leaving room for the missed shots panel (score panel).
  GraphicsWindow.BrushColor = "White"
  GraphicsWindow.PenColor = "Black"
  GraphicsWindow.PenWidth = WNDOW_PADDING / 2
  border = Shapes.AddRectangle(gw, gh - SCORE_PANEL_HEIGHT)
  Shapes.Move(border, 0, SCORE_PANEL_HEIGHT)
EndSub

' Create the missed shots text, centering it to the left side of the score panel.
Sub CreateScorePanel
  GraphicsWindow.BrushColor = "Black"
  GraphicsWindow.FontSize = SCORE_PANEL_HEIGHT - (WNDOW_PADDING * 2) 'Make the font as large as possible while allowing space for padding.
  scoreText = Shapes.AddText("Missed Shots: " + missedShots)
  Shapes.Move(scoreText, WNDOW_PADDING, WNDOW_PADDING)  
EndSub

' Balloon Subroutines************************************

'  Create a balloon using balloon properties to determine width and height,
' then position it at a random position in the left quarter of the game window.
Sub CreateBalloon
  GraphicsWindow.BrushColor = "YellowGreen"
  GraphicsWindow.PenColor = "LimeGreen"
  GraphicsWindow.PenWidth = BALLOON_OUTLINE_THICKNESS
  balloon = Shapes.AddEllipse(BALLOON_DIAMETER, BALLOON_DIAMETER)
  
  balloonX = WNDOW_PADDING
  balloonY = Math.GetRandomNumber(gh - WNDOW_PADDING * 2 - SCORE_PANEL_HEIGHT) + WNDOW_PADDING + SCORE_PANEL_HEIGHT - (BALLOON_DIAMETER / 2)
  
  Shapes.Move(balloon, balloonX, balloonY)
EndSub

' Move the balloon up or down for a defined number of frames "FRAMES_TILL_BALL_CHANGES_DIR"
' then either keep going in that direction, or reverse direction (50 / 50 chance)
Sub AnimateBalloon
  currStep = currStep + 1
  If (currStep >= FRAMES_TILL_BALL_CHANGES_DIR) Or (balloonY <= WNDOW_PADDING + SCORE_PANEL_HEIGHT) or (balloonY >= (gh - WNDOW_PADDING - BALLOON_DIAMETER)) Then
    ChangeYDirection()
    currStep = 0
  EndIf
  balloonY = balloonY + balloonDeltaY
  Shapes.Move(balloon, balloonX, balloonY)  
EndSub

'  Randomly change (50 / 50)  the vertical direction the balloon is moving in. (up or down)
' If the balloon is within a tolerance (set with the WINDOW_PADDING property) of
' the top of the game window, it will "bounce" rather than randomly select the dirction.
Sub ChangeYDirection
  GetRandBalloonDirection() 
  gh = GraphicsWindow.Height
  ' "Bounce" the balloon if it's too close to the top of the game window.
  If (balloonY <= WNDOW_PADDING + SCORE_PANEL_HEIGHT) Then
    balloonDirection = 1
  EndIf
  ' "Bounce" the balloon if it's too close to the bottom of the game window.
  If (balloonY >= (gh - WNDOW_PADDING - BALLOON_DIAMETER)) Then
    balloonDirection = -1
  EndIf  
  balloonDeltaY = balloonDirection * BALLOON_SPEED
EndSub
  
'  Set the "balloonDirection" variable to equal either 1 or -1, with a 50% liklihood of either
Sub GetRandBalloonDirection
  x = Math.GetRandomNumber(2)
  If x = 1 Then
    balloonDirection = 1
  Else
    balloonDirection = -1
  EndIf
EndSub

' Player Subroutines***********************************************************************

' Create the player at the center right of the game window.
Sub CreatePlayer
  GraphicsWindow.BrushColor = "Black"
  GraphicsWindow.PenColor = "Black"
  playerBody = Shapes.AddRectangle(PLAYER_WIDTH, PLAYER_HEIGHT)
  playerBarrel = Shapes.AddRectangle(PLAYER_BARREL_WIDTH, PLAYER_BARREL_HEIGHT)
  
  ' Set x coordinate to far right of game window, with a little padding.
  playerBodyX = gw - WNDOW_PADDING - PLAYER_WIDTH
  playerBarrelX = playerBodyX - PLAYER_BARREL_WIDTH
  
  ' Set y coordinate to middle of screen.
  playerBodyY = (gh / 2) - (PLAYER_HEIGHT / 2) + (SCORE_PANEL_HEIGHT / 2)
  playerBarrelY = playerBodyY + (PLAYER_HEIGHT / 2) - (PLAYER_BARREL_HEIGHT / 2)
  Shapes.Move(playerBody, playerBodyX, playerBodyY)
  Shapes.Move(playerBarrel, playerBarrelX, playerBarrelY)
EndSub

' Move the player to a new Y coordinate based on "playerDirection" and "PLAYER_SPEED"
Sub MovePlayer
  ' Calculate the new player Y coordinate based on direction and speed
  newPlayerBodyY = playerBodyY + playerDirection * PLAYER_SPEED
  
  ' If moving to the new coordinate won't exceed the boundries of the game window, move to new location
  If (newPlayerBodyY > WNDOW_PADDING + SCORE_PANEL_HEIGHT) And ((newPlayerBodyY + PLAYER_HEIGHT) < gh - WNDOW_PADDING) Then
    playerBodyY = newPlayerBodyY
    playerBarrelY = playerBodyY + (PLAYER_HEIGHT / 2) - (PLAYER_BARREL_HEIGHT / 2)
    Shapes.Move(playerBody, playerBodyX, playerBodyY)
    Shapes.Move(playerBarrel, playerBarrelX, playerBarrelY)
  EndIf
EndSub

' Bullet Subroutines**************************************************************

' Create the bullet at the tip of the player's barrel.
' If no bullet already exists, shoot a bullet from the player barrel, which will move towards the left.
Sub Shoot
  If bulletExists = "False" Then
    CreateBullet()
  EndIf
EndSub

' Create the bullet according to defined properties, then move to the end of the player's barrel.
Sub CreateBullet
  bulletExists = "True"
  GraphicsWindow.BrushColor = "Gray"
  GraphicsWindow.PenColor = "Gray"
  bullet = Shapes.AddRectangle(BULLET_WIDTH, BULLET_HEIGHT)
  bulletX = playerBarrelX - BULLET_WIDTH
  bulletY = playerBarrelY + (PLAYER_BARREL_HEIGHT / 2) - (BULLET_HEIGHT / 2)
  Shapes.Move(bullet, bulletX, bulletY)
EndSub

' Move the bullet to the left, by an amount defined with the property 'BULLET_SPEED'. 
' If this movement would take the bullet too far to the left, (i.e. withing the "WINDOW_PADDING" tolerance)
' instead remove the bullet, and iterate the number of 'missed shots' the player has taken.
Sub MoveBullet
  newBulletX = bulletX - BULLET_SPEED
  If newBulletX > WNDOW_PADDING Then
    bulletX = newBulletX
    Shapes.Move(bullet, bulletX, bulletY)
  Else
    bulletExists = "False"
    Shapes.Remove(bullet)
    missedShots = missedShots + 1
    Shapes.SetText(scoreText, "Missed Shots: " + missedShots)
  EndIf
EndSub

' Check if the bullet is colliding with the balloon
' The algorithm was modified from e James' answer given to the following StackOverflow question:
' https://stackoverflow.com/questions/401847/circle-rectangle-collision-detection-intersection
Sub CheckBulletBalloonCollision
  bx = balloonX + (BALLOON_DIAMETER / 2) ' Calculate ballon centre x coordinate
  by = balloonY + (BALLOON_DIAMETER / 2) ' Calculate balloon centre y coordinate
  sx = bulletX + (BULLET_WIDTH / 2) ' Calculate bullet (s)hot centre x coordinate
  sy = bulletY + (BULLET_HEIGHT / 2) ' Caclulate bullet (s)hot centre y coordinate
  
  ' Caclulate the horizontal distance between the bullet and balloon centre points.
  centrePointDistanceX = Math.Abs(bx - sx)
  ' Caclulate the vertical distance between the bullet and balloon centre points.
  centrePointDistanceY = Math.Abs(by - sy)
  
  ' Only calculate collision if bullet isn't too far from balloon for a collision to be possible .
  If (centrePointDistanceX < (BULLET_WIDTH / 2 + BALLOON_DIAMETER / 2)) And (centrePointDistanceY < (BULLET_HEIGHT / 2 + BALLOON_DIAMETER / 2)) Then
    ' Detect whether bullet is close enough to balloon that collision is guranteed.
    If (centrePointDistanceX <= (BULLET_WIDTH / 2)) Then
      gameWon = "True"
    ElseIf (centrePointDistanceY <= (BULLET_HEIGHT / 2)) Then
      gameWon = "True"
    Else
      '  Detect whether bullet is *NOT* in one of the four corners of the circle, where a square collision box would register a hit.
      cornerDistanceSq = Math.Power((centrePointDistanceX - BULLET_WIDTH / 2), 2) + Math.Power((centrePointDistanceY - BULLET_HEIGHT / 2), 2)
      If cornerDistanceSq <= Math.Power((BALLOON_DIAMETER / 2), 2) Then
        gameWon = "True"
      EndIf
    EndIf
  EndIf
EndSub

' Input Subroutines *******************************************************

' Handle key presses
Sub OnKeyDown
  ' If up arrow used, set player direction upwards and enable player movement.
  If GraphicsWindow.LastKey = "Up" Then
    playerMoving = "True"
    playerDirection = -1
  ' If up arrow used, set player direction downwards and enable player movement.
  ElseIf GraphicsWindow.LastKey = "Down" Then
    playerMoving = "True"
    playerDirection = 1
  ' If space key pressed, shoot bullet.
  ElseIf GraphicsWindow.LastKey = "Space" Then
    Shoot()
  EndIf
EndSub

' Disable player movement if arrow key depressed
Sub OnKeyUp
  If (GraphicsWindow.LastKey = "Up") Or (GraphicsWindow.LastKey = "Down") Then
    playerMoving = "False"
  EndIf
EndSub

' Misc Subroutines *******************************************************************

' Delay each render frame such that only a set number of frames occur each second, as defined
' by the "FPS" property.
' 
' This is so that object speeds are comparable from computer to computer, rather than
' determined by CPU speed.
' 
' Modified from a function used in: http://smallbasic.com/program/?PMD031-0
Sub SetFrameRate
  millisecondsPerFrame = 1000 / FPS
  delay = millisecondsPerFrame - (Clock.ElapsedMilliseconds - start)
  If delay > 0 Then
    Program.Delay(delay)
  EndIf
  start = Clock.ElapsedMilliseconds
EndSub